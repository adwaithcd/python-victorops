# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TeamScheduleResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, oncall=None, overrideoncall=None, policy_type=None, rotation_name=None, shift_name=None, shift_roll=None, rolls=None):
        """
        TeamScheduleResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'oncall': 'str',
            'overrideoncall': 'str',
            'policy_type': 'str',
            'rotation_name': 'str',
            'shift_name': 'str',
            'shift_roll': 'date',
            'rolls': 'list[TeamScheduleRollResource]'
        }

        self.attribute_map = {
            'oncall': 'oncall',
            'overrideoncall': 'overrideoncall',
            'policy_type': 'policyType',
            'rotation_name': 'rotationName',
            'shift_name': 'shiftName',
            'shift_roll': 'shiftRoll',
            'rolls': 'rolls'
        }

        self._oncall = oncall
        self._overrideoncall = overrideoncall
        self._policy_type = policy_type
        self._rotation_name = rotation_name
        self._shift_name = shift_name
        self._shift_roll = shift_roll
        self._rolls = rolls

    @property
    def oncall(self):
        """
        Gets the oncall of this TeamScheduleResource.
        The user scheduled on call (if any)

        :return: The oncall of this TeamScheduleResource.
        :rtype: str
        """
        return self._oncall

    @oncall.setter
    def oncall(self, oncall):
        """
        Sets the oncall of this TeamScheduleResource.
        The user scheduled on call (if any)

        :param oncall: The oncall of this TeamScheduleResource.
        :type: str
        """

        self._oncall = oncall

    @property
    def overrideoncall(self):
        """
        Gets the overrideoncall of this TeamScheduleResource.
        The user overriding the scheduled on call user (if any)

        :return: The overrideoncall of this TeamScheduleResource.
        :rtype: str
        """
        return self._overrideoncall

    @overrideoncall.setter
    def overrideoncall(self, overrideoncall):
        """
        Sets the overrideoncall of this TeamScheduleResource.
        The user overriding the scheduled on call user (if any)

        :param overrideoncall: The overrideoncall of this TeamScheduleResource.
        :type: str
        """

        self._overrideoncall = overrideoncall

    @property
    def policy_type(self):
        """
        Gets the policy_type of this TeamScheduleResource.

        :return: The policy_type of this TeamScheduleResource.
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """
        Sets the policy_type of this TeamScheduleResource.

        :param policy_type: The policy_type of this TeamScheduleResource.
        :type: str
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type

    @property
    def rotation_name(self):
        """
        Gets the rotation_name of this TeamScheduleResource.

        :return: The rotation_name of this TeamScheduleResource.
        :rtype: str
        """
        return self._rotation_name

    @rotation_name.setter
    def rotation_name(self, rotation_name):
        """
        Sets the rotation_name of this TeamScheduleResource.

        :param rotation_name: The rotation_name of this TeamScheduleResource.
        :type: str
        """

        self._rotation_name = rotation_name

    @property
    def shift_name(self):
        """
        Gets the shift_name of this TeamScheduleResource.

        :return: The shift_name of this TeamScheduleResource.
        :rtype: str
        """
        return self._shift_name

    @shift_name.setter
    def shift_name(self, shift_name):
        """
        Sets the shift_name of this TeamScheduleResource.

        :param shift_name: The shift_name of this TeamScheduleResource.
        :type: str
        """

        self._shift_name = shift_name

    @property
    def shift_roll(self):
        """
        Gets the shift_roll of this TeamScheduleResource.

        :return: The shift_roll of this TeamScheduleResource.
        :rtype: date
        """
        return self._shift_roll

    @shift_roll.setter
    def shift_roll(self, shift_roll):
        """
        Sets the shift_roll of this TeamScheduleResource.

        :param shift_roll: The shift_roll of this TeamScheduleResource.
        :type: date
        """

        self._shift_roll = shift_roll

    @property
    def rolls(self):
        """
        Gets the rolls of this TeamScheduleResource.

        :return: The rolls of this TeamScheduleResource.
        :rtype: list[TeamScheduleRollResource]
        """
        return self._rolls

    @rolls.setter
    def rolls(self, rolls):
        """
        Sets the rolls of this TeamScheduleResource.

        :param rolls: The rolls of this TeamScheduleResource.
        :type: list[TeamScheduleRollResource]
        """
        if rolls is None:
            raise ValueError("Invalid value for `rolls`, must not be `None`")

        self._rolls = rolls

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TeamScheduleResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
