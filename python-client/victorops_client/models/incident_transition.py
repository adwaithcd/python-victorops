# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IncidentTransition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, at=None, by=None, message=None, manually=None, alert_id=None, alert_url=None):
        """
        IncidentTransition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'at': 'str',
            'by': 'str',
            'message': 'str',
            'manually': 'bool',
            'alert_id': 'str',
            'alert_url': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'at': 'at',
            'by': 'by',
            'message': 'message',
            'manually': 'manually',
            'alert_id': 'alertId',
            'alert_url': 'alertUrl'
        }

        self._name = name
        self._at = at
        self._by = by
        self._message = message
        self._manually = manually
        self._alert_id = alert_id
        self._alert_url = alert_url

    @property
    def name(self):
        """
        Gets the name of this IncidentTransition.
        The transition name

        :return: The name of this IncidentTransition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IncidentTransition.
        The transition name

        :param name: The name of this IncidentTransition.
        :type: str
        """

        self._name = name

    @property
    def at(self):
        """
        Gets the at of this IncidentTransition.
        The time of the transition

        :return: The at of this IncidentTransition.
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at):
        """
        Sets the at of this IncidentTransition.
        The time of the transition

        :param at: The at of this IncidentTransition.
        :type: str
        """

        self._at = at

    @property
    def by(self):
        """
        Gets the by of this IncidentTransition.
        The user that caused the transition (if any)

        :return: The by of this IncidentTransition.
        :rtype: str
        """
        return self._by

    @by.setter
    def by(self, by):
        """
        Sets the by of this IncidentTransition.
        The user that caused the transition (if any)

        :param by: The by of this IncidentTransition.
        :type: str
        """

        self._by = by

    @property
    def message(self):
        """
        Gets the message of this IncidentTransition.
        The message entered by that user (if any)

        :return: The message of this IncidentTransition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this IncidentTransition.
        The message entered by that user (if any)

        :param message: The message of this IncidentTransition.
        :type: str
        """

        self._message = message

    @property
    def manually(self):
        """
        Gets the manually of this IncidentTransition.
        If the incident transition was caused by a person

        :return: The manually of this IncidentTransition.
        :rtype: bool
        """
        return self._manually

    @manually.setter
    def manually(self, manually):
        """
        Sets the manually of this IncidentTransition.
        If the incident transition was caused by a person

        :param manually: The manually of this IncidentTransition.
        :type: bool
        """

        self._manually = manually

    @property
    def alert_id(self):
        """
        Gets the alert_id of this IncidentTransition.
        The unique alert ID that caused the transition

        :return: The alert_id of this IncidentTransition.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """
        Sets the alert_id of this IncidentTransition.
        The unique alert ID that caused the transition

        :param alert_id: The alert_id of this IncidentTransition.
        :type: str
        """

        self._alert_id = alert_id

    @property
    def alert_url(self):
        """
        Gets the alert_url of this IncidentTransition.
        A URL to retrieve the details of the alert that caused the transition

        :return: The alert_url of this IncidentTransition.
        :rtype: str
        """
        return self._alert_url

    @alert_url.setter
    def alert_url(self, alert_url):
        """
        Sets the alert_url of this IncidentTransition.
        A URL to retrieve the details of the alert that caused the transition

        :param alert_url: The alert_url of this IncidentTransition.
        :type: str
        """

        self._alert_url = alert_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IncidentTransition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
