# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddTeamResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, slug=None, member_count=None, version=None, is_default_team=None, self_url=None, members_url=None):
        """
        AddTeamResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'slug': 'str',
            'member_count': 'float',
            'version': 'float',
            'is_default_team': 'bool',
            'self_url': 'str',
            'members_url': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'member_count': 'memberCount',
            'version': 'version',
            'is_default_team': 'isDefaultTeam',
            'self_url': '_selfUrl',
            'members_url': '_membersUrl'
        }

        self._name = name
        self._slug = slug
        self._member_count = member_count
        self._version = version
        self._is_default_team = is_default_team
        self._self_url = self_url
        self._members_url = members_url

    @property
    def name(self):
        """
        Gets the name of this AddTeamResponse.

        :return: The name of this AddTeamResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AddTeamResponse.

        :param name: The name of this AddTeamResponse.
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """
        Gets the slug of this AddTeamResponse.

        :return: The slug of this AddTeamResponse.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this AddTeamResponse.

        :param slug: The slug of this AddTeamResponse.
        :type: str
        """

        self._slug = slug

    @property
    def member_count(self):
        """
        Gets the member_count of this AddTeamResponse.

        :return: The member_count of this AddTeamResponse.
        :rtype: float
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """
        Sets the member_count of this AddTeamResponse.

        :param member_count: The member_count of this AddTeamResponse.
        :type: float
        """

        self._member_count = member_count

    @property
    def version(self):
        """
        Gets the version of this AddTeamResponse.

        :return: The version of this AddTeamResponse.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this AddTeamResponse.

        :param version: The version of this AddTeamResponse.
        :type: float
        """

        self._version = version

    @property
    def is_default_team(self):
        """
        Gets the is_default_team of this AddTeamResponse.

        :return: The is_default_team of this AddTeamResponse.
        :rtype: bool
        """
        return self._is_default_team

    @is_default_team.setter
    def is_default_team(self, is_default_team):
        """
        Sets the is_default_team of this AddTeamResponse.

        :param is_default_team: The is_default_team of this AddTeamResponse.
        :type: bool
        """

        self._is_default_team = is_default_team

    @property
    def self_url(self):
        """
        Gets the self_url of this AddTeamResponse.

        :return: The self_url of this AddTeamResponse.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """
        Sets the self_url of this AddTeamResponse.

        :param self_url: The self_url of this AddTeamResponse.
        :type: str
        """

        self._self_url = self_url

    @property
    def members_url(self):
        """
        Gets the members_url of this AddTeamResponse.

        :return: The members_url of this AddTeamResponse.
        :rtype: str
        """
        return self._members_url

    @members_url.setter
    def members_url(self, members_url):
        """
        Sets the members_url of this AddTeamResponse.

        :param members_url: The members_url of this AddTeamResponse.
        :type: str
        """

        self._members_url = members_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddTeamResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
