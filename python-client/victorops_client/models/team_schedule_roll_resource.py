# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TeamScheduleRollResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, change=None, until=None, oncall=None, is_roll=None):
        """
        TeamScheduleRollResource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'change': 'date',
            'until': 'date',
            'oncall': 'str',
            'is_roll': 'bool'
        }

        self.attribute_map = {
            'change': 'change',
            'until': 'until',
            'oncall': 'oncall',
            'is_roll': 'isRoll'
        }

        self._change = change
        self._until = until
        self._oncall = oncall
        self._is_roll = is_roll

    @property
    def change(self):
        """
        Gets the change of this TeamScheduleRollResource.
        The time the period is scheduled to start

        :return: The change of this TeamScheduleRollResource.
        :rtype: date
        """
        return self._change

    @change.setter
    def change(self, change):
        """
        Sets the change of this TeamScheduleRollResource.
        The time the period is scheduled to start

        :param change: The change of this TeamScheduleRollResource.
        :type: date
        """
        if change is None:
            raise ValueError("Invalid value for `change`, must not be `None`")

        self._change = change

    @property
    def until(self):
        """
        Gets the until of this TeamScheduleRollResource.
        The time the period is scheduled to end

        :return: The until of this TeamScheduleRollResource.
        :rtype: date
        """
        return self._until

    @until.setter
    def until(self, until):
        """
        Sets the until of this TeamScheduleRollResource.
        The time the period is scheduled to end

        :param until: The until of this TeamScheduleRollResource.
        :type: date
        """
        if until is None:
            raise ValueError("Invalid value for `until`, must not be `None`")

        self._until = until

    @property
    def oncall(self):
        """
        Gets the oncall of this TeamScheduleRollResource.
        The user scheduled on call (if any)

        :return: The oncall of this TeamScheduleRollResource.
        :rtype: str
        """
        return self._oncall

    @oncall.setter
    def oncall(self, oncall):
        """
        Sets the oncall of this TeamScheduleRollResource.
        The user scheduled on call (if any)

        :param oncall: The oncall of this TeamScheduleRollResource.
        :type: str
        """

        self._oncall = oncall

    @property
    def is_roll(self):
        """
        Gets the is_roll of this TeamScheduleRollResource.

        :return: The is_roll of this TeamScheduleRollResource.
        :rtype: bool
        """
        return self._is_roll

    @is_roll.setter
    def is_roll(self, is_roll):
        """
        Sets the is_roll of this TeamScheduleRollResource.

        :param is_roll: The is_roll of this TeamScheduleRollResource.
        :type: bool
        """
        if is_roll is None:
            raise ValueError("Invalid value for `is_roll`, must not be `None`")

        self._is_roll = is_roll

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TeamScheduleRollResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
