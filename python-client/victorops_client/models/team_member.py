# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TeamMember(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name=None, last_name=None, username=None, version=None, verified=None, self_url=None):
        """
        TeamMember - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_name': 'str',
            'last_name': 'str',
            'username': 'str',
            'version': 'float',
            'verified': 'str',
            'self_url': 'str'
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'username': 'username',
            'version': 'version',
            'verified': 'verified',
            'self_url': '_selfUrl'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._username = username
        self._version = version
        self._verified = verified
        self._self_url = self_url

    @property
    def first_name(self):
        """
        Gets the first_name of this TeamMember.

        :return: The first_name of this TeamMember.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this TeamMember.

        :param first_name: The first_name of this TeamMember.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this TeamMember.

        :return: The last_name of this TeamMember.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this TeamMember.

        :param last_name: The last_name of this TeamMember.
        :type: str
        """

        self._last_name = last_name

    @property
    def username(self):
        """
        Gets the username of this TeamMember.

        :return: The username of this TeamMember.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this TeamMember.

        :param username: The username of this TeamMember.
        :type: str
        """

        self._username = username

    @property
    def version(self):
        """
        Gets the version of this TeamMember.

        :return: The version of this TeamMember.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this TeamMember.

        :param version: The version of this TeamMember.
        :type: float
        """

        self._version = version

    @property
    def verified(self):
        """
        Gets the verified of this TeamMember.
        Whether or not this user has set their password (will always be false)

        :return: The verified of this TeamMember.
        :rtype: str
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """
        Sets the verified of this TeamMember.
        Whether or not this user has set their password (will always be false)

        :param verified: The verified of this TeamMember.
        :type: str
        """

        self._verified = verified

    @property
    def self_url(self):
        """
        Gets the self_url of this TeamMember.

        :return: The self_url of this TeamMember.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """
        Sets the self_url of this TeamMember.

        :param self_url: The self_url of this TeamMember.
        :type: str
        """

        self._self_url = self_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TeamMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
