# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetAlertResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message_type=None, entity_id=None, timestamp=None, state_start_time=None, state_message=None, monitoring_tool=None, entity_display_name=None, ack_msg=None, ack_author=None, raw=None):
        """
        GetAlertResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message_type': 'str',
            'entity_id': 'str',
            'timestamp': 'float',
            'state_start_time': 'float',
            'state_message': 'str',
            'monitoring_tool': 'str',
            'entity_display_name': 'str',
            'ack_msg': 'str',
            'ack_author': 'str',
            'raw': 'str'
        }

        self.attribute_map = {
            'message_type': 'messageType',
            'entity_id': 'entityId',
            'timestamp': 'timestamp',
            'state_start_time': 'stateStartTime',
            'state_message': 'stateMessage',
            'monitoring_tool': 'monitoringTool',
            'entity_display_name': 'entityDisplayName',
            'ack_msg': 'ackMsg',
            'ack_author': 'ackAuthor',
            'raw': 'raw'
        }

        self._message_type = message_type
        self._entity_id = entity_id
        self._timestamp = timestamp
        self._state_start_time = state_start_time
        self._state_message = state_message
        self._monitoring_tool = monitoring_tool
        self._entity_display_name = entity_display_name
        self._ack_msg = ack_msg
        self._ack_author = ack_author
        self._raw = raw

    @property
    def message_type(self):
        """
        Gets the message_type of this GetAlertResponse.
        The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 

        :return: The message_type of this GetAlertResponse.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this GetAlertResponse.
        The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 

        :param message_type: The message_type of this GetAlertResponse.
        :type: str
        """

        self._message_type = message_type

    @property
    def entity_id(self):
        """
        Gets the entity_id of this GetAlertResponse.
        Identifies the entity (host, service, etc.) this alert was about. 

        :return: The entity_id of this GetAlertResponse.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this GetAlertResponse.
        Identifies the entity (host, service, etc.) this alert was about. 

        :param entity_id: The entity_id of this GetAlertResponse.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this GetAlertResponse.
        Timestamp of the alert in seconds since epoch.

        :return: The timestamp of this GetAlertResponse.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this GetAlertResponse.
        Timestamp of the alert in seconds since epoch.

        :param timestamp: The timestamp of this GetAlertResponse.
        :type: float
        """

        self._timestamp = timestamp

    @property
    def state_start_time(self):
        """
        Gets the state_start_time of this GetAlertResponse.
        The time this entity entered its current state (seconds since epoch).

        :return: The state_start_time of this GetAlertResponse.
        :rtype: float
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """
        Sets the state_start_time of this GetAlertResponse.
        The time this entity entered its current state (seconds since epoch).

        :param state_start_time: The state_start_time of this GetAlertResponse.
        :type: float
        """

        self._state_start_time = state_start_time

    @property
    def state_message(self):
        """
        Gets the state_message of this GetAlertResponse.
        Any additional status information from the alert item.

        :return: The state_message of this GetAlertResponse.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """
        Sets the state_message of this GetAlertResponse.
        Any additional status information from the alert item.

        :param state_message: The state_message of this GetAlertResponse.
        :type: str
        """

        self._state_message = state_message

    @property
    def monitoring_tool(self):
        """
        Gets the monitoring_tool of this GetAlertResponse.
        The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)

        :return: The monitoring_tool of this GetAlertResponse.
        :rtype: str
        """
        return self._monitoring_tool

    @monitoring_tool.setter
    def monitoring_tool(self, monitoring_tool):
        """
        Sets the monitoring_tool of this GetAlertResponse.
        The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)

        :param monitoring_tool: The monitoring_tool of this GetAlertResponse.
        :type: str
        """

        self._monitoring_tool = monitoring_tool

    @property
    def entity_display_name(self):
        """
        Gets the entity_display_name of this GetAlertResponse.
        Used within VictorOps to display a human-readable name for the entity.

        :return: The entity_display_name of this GetAlertResponse.
        :rtype: str
        """
        return self._entity_display_name

    @entity_display_name.setter
    def entity_display_name(self, entity_display_name):
        """
        Sets the entity_display_name of this GetAlertResponse.
        Used within VictorOps to display a human-readable name for the entity.

        :param entity_display_name: The entity_display_name of this GetAlertResponse.
        :type: str
        """

        self._entity_display_name = entity_display_name

    @property
    def ack_msg(self):
        """
        Gets the ack_msg of this GetAlertResponse.
        A user entered comment for the acknowledgment.

        :return: The ack_msg of this GetAlertResponse.
        :rtype: str
        """
        return self._ack_msg

    @ack_msg.setter
    def ack_msg(self, ack_msg):
        """
        Sets the ack_msg of this GetAlertResponse.
        A user entered comment for the acknowledgment.

        :param ack_msg: The ack_msg of this GetAlertResponse.
        :type: str
        """

        self._ack_msg = ack_msg

    @property
    def ack_author(self):
        """
        Gets the ack_author of this GetAlertResponse.
        The user that acknowledged the incident.

        :return: The ack_author of this GetAlertResponse.
        :rtype: str
        """
        return self._ack_author

    @ack_author.setter
    def ack_author(self, ack_author):
        """
        Sets the ack_author of this GetAlertResponse.
        The user that acknowledged the incident.

        :param ack_author: The ack_author of this GetAlertResponse.
        :type: str
        """

        self._ack_author = ack_author

    @property
    def raw(self):
        """
        Gets the raw of this GetAlertResponse.
        The full, raw alert details JSON string (i.e. parse the string into a JSON object) 

        :return: The raw of this GetAlertResponse.
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """
        Sets the raw of this GetAlertResponse.
        The full, raw alert details JSON string (i.e. parse the string into a JSON object) 

        :param raw: The raw of this GetAlertResponse.
        :type: str
        """

        self._raw = raw

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetAlertResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
