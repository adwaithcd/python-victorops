# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IncidentInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, incident_number=None, start_time=None, current_phase=None, alert_count=None, last_alert_time=None, last_alert_id=None, ack_user_id=None, ack_time=None, entity_id=None, host=None, service=None, end_time=None, ack_user=None, entity_type=None, entity_disp_name=None, teams=None):
        """
        IncidentInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'incident_number': 'str',
            'start_time': 'str',
            'current_phase': 'str',
            'alert_count': 'float',
            'last_alert_time': 'str',
            'last_alert_id': 'str',
            'ack_user_id': 'str',
            'ack_time': 'str',
            'entity_id': 'str',
            'host': 'str',
            'service': 'str',
            'end_time': 'str',
            'ack_user': 'AckUser',
            'entity_type': 'str',
            'entity_disp_name': 'str',
            'teams': 'str'
        }

        self.attribute_map = {
            'incident_number': 'incidentNumber',
            'start_time': 'startTime',
            'current_phase': 'currentPhase',
            'alert_count': 'alertCount',
            'last_alert_time': 'lastAlertTime',
            'last_alert_id': 'lastAlertID',
            'ack_user_id': 'ackUserId',
            'ack_time': 'ackTime',
            'entity_id': 'entityId',
            'host': 'host',
            'service': 'service',
            'end_time': 'endTime',
            'ack_user': 'ackUser',
            'entity_type': 'entityType',
            'entity_disp_name': 'entityDispName',
            'teams': 'teams'
        }

        self._incident_number = incident_number
        self._start_time = start_time
        self._current_phase = current_phase
        self._alert_count = alert_count
        self._last_alert_time = last_alert_time
        self._last_alert_id = last_alert_id
        self._ack_user_id = ack_user_id
        self._ack_time = ack_time
        self._entity_id = entity_id
        self._host = host
        self._service = service
        self._end_time = end_time
        self._ack_user = ack_user
        self._entity_type = entity_type
        self._entity_disp_name = entity_disp_name
        self._teams = teams

    @property
    def incident_number(self):
        """
        Gets the incident_number of this IncidentInfo.
        The VictorOps incident number

        :return: The incident_number of this IncidentInfo.
        :rtype: str
        """
        return self._incident_number

    @incident_number.setter
    def incident_number(self, incident_number):
        """
        Sets the incident_number of this IncidentInfo.
        The VictorOps incident number

        :param incident_number: The incident_number of this IncidentInfo.
        :type: str
        """

        self._incident_number = incident_number

    @property
    def start_time(self):
        """
        Gets the start_time of this IncidentInfo.
        The time the incident started

        :return: The start_time of this IncidentInfo.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this IncidentInfo.
        The time the incident started

        :param start_time: The start_time of this IncidentInfo.
        :type: str
        """

        self._start_time = start_time

    @property
    def current_phase(self):
        """
        Gets the current_phase of this IncidentInfo.
        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :return: The current_phase of this IncidentInfo.
        :rtype: str
        """
        return self._current_phase

    @current_phase.setter
    def current_phase(self, current_phase):
        """
        Sets the current_phase of this IncidentInfo.
        The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\".

        :param current_phase: The current_phase of this IncidentInfo.
        :type: str
        """

        self._current_phase = current_phase

    @property
    def alert_count(self):
        """
        Gets the alert_count of this IncidentInfo.
        The number of alerts received for this incident

        :return: The alert_count of this IncidentInfo.
        :rtype: float
        """
        return self._alert_count

    @alert_count.setter
    def alert_count(self, alert_count):
        """
        Sets the alert_count of this IncidentInfo.
        The number of alerts received for this incident

        :param alert_count: The alert_count of this IncidentInfo.
        :type: float
        """

        self._alert_count = alert_count

    @property
    def last_alert_time(self):
        """
        Gets the last_alert_time of this IncidentInfo.
        The time of the last alert received for the incident

        :return: The last_alert_time of this IncidentInfo.
        :rtype: str
        """
        return self._last_alert_time

    @last_alert_time.setter
    def last_alert_time(self, last_alert_time):
        """
        Sets the last_alert_time of this IncidentInfo.
        The time of the last alert received for the incident

        :param last_alert_time: The last_alert_time of this IncidentInfo.
        :type: str
        """

        self._last_alert_time = last_alert_time

    @property
    def last_alert_id(self):
        """
        Gets the last_alert_id of this IncidentInfo.
        The unique id of the last alert for the incident

        :return: The last_alert_id of this IncidentInfo.
        :rtype: str
        """
        return self._last_alert_id

    @last_alert_id.setter
    def last_alert_id(self, last_alert_id):
        """
        Sets the last_alert_id of this IncidentInfo.
        The unique id of the last alert for the incident

        :param last_alert_id: The last_alert_id of this IncidentInfo.
        :type: str
        """

        self._last_alert_id = last_alert_id

    @property
    def ack_user_id(self):
        """
        Gets the ack_user_id of this IncidentInfo.
        The VictorOps user id of the user that acknowledged the incident

        :return: The ack_user_id of this IncidentInfo.
        :rtype: str
        """
        return self._ack_user_id

    @ack_user_id.setter
    def ack_user_id(self, ack_user_id):
        """
        Sets the ack_user_id of this IncidentInfo.
        The VictorOps user id of the user that acknowledged the incident

        :param ack_user_id: The ack_user_id of this IncidentInfo.
        :type: str
        """

        self._ack_user_id = ack_user_id

    @property
    def ack_time(self):
        """
        Gets the ack_time of this IncidentInfo.
        The time of the last acknowledgment of the incident

        :return: The ack_time of this IncidentInfo.
        :rtype: str
        """
        return self._ack_time

    @ack_time.setter
    def ack_time(self, ack_time):
        """
        Sets the ack_time of this IncidentInfo.
        The time of the last acknowledgment of the incident

        :param ack_time: The ack_time of this IncidentInfo.
        :type: str
        """

        self._ack_time = ack_time

    @property
    def entity_id(self):
        """
        Gets the entity_id of this IncidentInfo.
        The unique identification of the entity being monitored that caused the incident

        :return: The entity_id of this IncidentInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this IncidentInfo.
        The unique identification of the entity being monitored that caused the incident

        :param entity_id: The entity_id of this IncidentInfo.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def host(self):
        """
        Gets the host of this IncidentInfo.
        The host on which the incident occurred

        :return: The host of this IncidentInfo.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this IncidentInfo.
        The host on which the incident occurred

        :param host: The host of this IncidentInfo.
        :type: str
        """

        self._host = host

    @property
    def service(self):
        """
        Gets the service of this IncidentInfo.
        The service name causing the incident (if any)

        :return: The service of this IncidentInfo.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this IncidentInfo.
        The service name causing the incident (if any)

        :param service: The service of this IncidentInfo.
        :type: str
        """

        self._service = service

    @property
    def end_time(self):
        """
        Gets the end_time of this IncidentInfo.
        The time the incident ended

        :return: The end_time of this IncidentInfo.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this IncidentInfo.
        The time the incident ended

        :param end_time: The end_time of this IncidentInfo.
        :type: str
        """

        self._end_time = end_time

    @property
    def ack_user(self):
        """
        Gets the ack_user of this IncidentInfo.

        :return: The ack_user of this IncidentInfo.
        :rtype: AckUser
        """
        return self._ack_user

    @ack_user.setter
    def ack_user(self, ack_user):
        """
        Sets the ack_user of this IncidentInfo.

        :param ack_user: The ack_user of this IncidentInfo.
        :type: AckUser
        """

        self._ack_user = ack_user

    @property
    def entity_type(self):
        """
        Gets the entity_type of this IncidentInfo.
        The type of entity causing the incident (host/service)

        :return: The entity_type of this IncidentInfo.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this IncidentInfo.
        The type of entity causing the incident (host/service)

        :param entity_type: The entity_type of this IncidentInfo.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def entity_disp_name(self):
        """
        Gets the entity_disp_name of this IncidentInfo.
        The display name of the entity causing the incident

        :return: The entity_disp_name of this IncidentInfo.
        :rtype: str
        """
        return self._entity_disp_name

    @entity_disp_name.setter
    def entity_disp_name(self, entity_disp_name):
        """
        Sets the entity_disp_name of this IncidentInfo.
        The display name of the entity causing the incident

        :param entity_disp_name: The entity_disp_name of this IncidentInfo.
        :type: str
        """

        self._entity_disp_name = entity_disp_name

    @property
    def teams(self):
        """
        Gets the teams of this IncidentInfo.
        The teams that were paged for the incident (comma separated).

        :return: The teams of this IncidentInfo.
        :rtype: str
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """
        Sets the teams of this IncidentInfo.
        The teams that were paged for the incident (comma separated).

        :param teams: The teams of this IncidentInfo.
        :type: str
        """

        self._teams = teams

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IncidentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
