# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserContactMethodsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def user_user_contact_methods_devices_contact_id_delete(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact device for a user
        Delete a contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: ContactDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_devices_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_devices_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_devices_contact_id_delete_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact device for a user
        Delete a contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: ContactDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_devices_contact_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_devices_contact_id_delete`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_devices_contact_id_delete`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_devices_contact_id_delete`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_devices_contact_id_delete`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/devices/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContactDevice',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_devices_contact_id_get(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicated contact device for a user
        Get the indicated contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[ContactDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_devices_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_devices_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_devices_contact_id_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicated contact device for a user
        Get the indicated contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[ContactDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_devices_contact_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_devices_contact_id_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_devices_contact_id_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_devices_contact_id_get`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_devices_contact_id_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/devices/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ContactDevice]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_devices_contact_id_put(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact device for a user
        Update a contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_put(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactDeviceAdd body: The contact device (required)
        :return: ContactDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_devices_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
        else:
            (data) = self.user_user_contact_methods_devices_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
            return data

    def user_user_contact_methods_devices_contact_id_put_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact device for a user
        Update a contact device for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactDeviceAdd body: The contact device (required)
        :return: ContactDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_devices_contact_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_devices_contact_id_put`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_devices_contact_id_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_devices_contact_id_put`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_devices_contact_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_user_contact_methods_devices_contact_id_put`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/devices/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContactDevice',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_devices_get(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact devices for a user
        Get the contact methods for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_get(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[ContactDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_devices_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
        else:
            (data) = self.user_user_contact_methods_devices_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
            return data

    def user_user_contact_methods_devices_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact devices for a user
        Get the contact methods for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_devices_get_with_http_info(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[ContactDevice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_devices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_devices_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_devices_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_devices_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/devices'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ContactDevice]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_emails_contact_id_delete(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact email for a user
        Delete the indicated contact email for the user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_emails_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_emails_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_emails_contact_id_delete_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact email for a user
        Delete the indicated contact email for the user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_emails_contact_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_emails_contact_id_delete`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_emails_contact_id_delete`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_emails_contact_id_delete`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_emails_contact_id_delete`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/emails/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_emails_contact_id_get(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicate contact email for a user
        Get the indicated contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_emails_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_emails_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_emails_contact_id_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicate contact email for a user
        Get the indicated contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_emails_contact_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_emails_contact_id_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_emails_contact_id_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_emails_contact_id_get`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_emails_contact_id_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/emails/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserContact]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_emails_contact_id_put(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact email for a user
        Update the indicated contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_put(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactEmailAdd body: The contact email (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_emails_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
        else:
            (data) = self.user_user_contact_methods_emails_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
            return data

    def user_user_contact_methods_emails_contact_id_put_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact email for a user
        Update the indicated contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactEmailAdd body: The contact email (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_emails_contact_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_emails_contact_id_put`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_emails_contact_id_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_emails_contact_id_put`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_emails_contact_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_user_contact_methods_emails_contact_id_put`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/emails/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_emails_get(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact emails for a user
        Get the contact emails for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_get(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_emails_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
        else:
            (data) = self.user_user_contact_methods_emails_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
            return data

    def user_user_contact_methods_emails_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact emails for a user
        Get the contact emails for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_get_with_http_info(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_emails_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_emails_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_emails_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_emails_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/emails'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserContact]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_emails_post(self, x_vo_api_id, x_vo_api_key, user, body, **kwargs):
        """
        Create a contact emails for a user
        Create a contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_post(x_vo_api_id, x_vo_api_key, user, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param ContactEmailAdd body: The contact email (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_emails_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, **kwargs)
        else:
            (data) = self.user_user_contact_methods_emails_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, **kwargs)
            return data

    def user_user_contact_methods_emails_post_with_http_info(self, x_vo_api_id, x_vo_api_key, user, body, **kwargs):
        """
        Create a contact emails for a user
        Create a contact email for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_emails_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param ContactEmailAdd body: The contact email (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_emails_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_emails_post`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_emails_post`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_emails_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_user_contact_methods_emails_post`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/emails'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_get(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact methods for a user
        Get the contact methods for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_get(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
        else:
            (data) = self.user_user_contact_methods_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
            return data

    def user_user_contact_methods_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact methods for a user
        Get the contact methods for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_get_with_http_info(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_phones_contact_id_delete(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact phone for a user
        Delete the indicated contact phone for the user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_phones_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_phones_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_phones_contact_id_delete_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Delete a contact phone for a user
        Delete the indicated contact phone for the user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_phones_contact_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_phones_contact_id_delete`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_phones_contact_id_delete`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_phones_contact_id_delete`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_phones_contact_id_delete`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/phones/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_phones_contact_id_get(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicate contact phone for a user
        Get the indicated contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_phones_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
        else:
            (data) = self.user_user_contact_methods_phones_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs)
            return data

    def user_user_contact_methods_phones_contact_id_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, **kwargs):
        """
        Get the indicate contact phone for a user
        Get the indicated contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_phones_contact_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_phones_contact_id_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_phones_contact_id_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_phones_contact_id_get`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_phones_contact_id_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/phones/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserContact]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_phones_contact_id_put(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact phone for a user
        Update the indicated contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_put(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactPhoneAdd body: The contact phone (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_phones_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
        else:
            (data) = self.user_user_contact_methods_phones_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs)
            return data

    def user_user_contact_methods_phones_contact_id_put_with_http_info(self, x_vo_api_id, x_vo_api_key, user, contact_id, body, **kwargs):
        """
        Update a contact phone for a user
        Update the indicated contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param str contact_id: The unique contact identifier (required)
        :param ContactPhoneAdd body: The contact phone (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'contact_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_phones_contact_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_phones_contact_id_put`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_phones_contact_id_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_phones_contact_id_put`")
        # verify the required parameter 'contact_id' is set
        if ('contact_id' not in params) or (params['contact_id'] is None):
            raise ValueError("Missing the required parameter `contact_id` when calling `user_user_contact_methods_phones_contact_id_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_user_contact_methods_phones_contact_id_put`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/phones/{contactId}'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'contact_id' in params:
            path_params['contactId'] = params['contact_id']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_phones_get(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact phones for a user
        Get the contact phones for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_get(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_phones_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
        else:
            (data) = self.user_user_contact_methods_phones_get_with_http_info(x_vo_api_id, x_vo_api_key, user, **kwargs)
            return data

    def user_user_contact_methods_phones_get_with_http_info(self, x_vo_api_id, x_vo_api_key, user, **kwargs):
        """
        Get a list of all contact phones for a user
        Get the contact phones for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_get_with_http_info(x_vo_api_id, x_vo_api_key, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :return: list[UserContact]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_phones_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_phones_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_phones_get`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_phones_get`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/phones'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserContact]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_user_contact_methods_phones_post(self, x_vo_api_id, x_vo_api_key, user, body, **kwargs):
        """
        Create a contact phones for a user
        Create a contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_post(x_vo_api_id, x_vo_api_key, user, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param ContactPhoneAdd body: The contact phone (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_user_contact_methods_phones_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, **kwargs)
        else:
            (data) = self.user_user_contact_methods_phones_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, **kwargs)
            return data

    def user_user_contact_methods_phones_post_with_http_info(self, x_vo_api_id, x_vo_api_key, user, body, **kwargs):
        """
        Create a contact phones for a user
        Create a contact phone for a user  This API may be called a maximum of 15 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_user_contact_methods_phones_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str user: The VictorOps user ID (required)
        :param ContactPhoneAdd body: The contact phone (required)
        :return: UserContact
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'user', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_user_contact_methods_phones_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `user_user_contact_methods_phones_post`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `user_user_contact_methods_phones_post`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_user_contact_methods_phones_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `user_user_contact_methods_phones_post`")


        collection_formats = {}

        resource_path = '/user/{user}/contact-methods/phones'.replace('{format}', 'json')
        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = {}

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserContact',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
