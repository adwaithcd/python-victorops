# coding: utf-8

"""
    VictorOps API

    This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportingApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_reporting_v1_incidents_get(self, x_vo_api_id, x_vo_api_key, **kwargs):
        """
        Get/search incident history
        Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v1_incidents_get(x_vo_api_id, x_vo_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param float offset: The offset within the set of matching incidents
        :param float limit: The maximum number of matching incidents to return (100 max)
        :param str entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :param str incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :param str started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :param str started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :param str host: The host involved in the incident Multiple values can be separated with commas.
        :param str service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :param str current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :return: list[IncidentList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_reporting_v1_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, **kwargs)
        else:
            (data) = self.api_reporting_v1_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, **kwargs)
            return data

    def api_reporting_v1_incidents_get_with_http_info(self, x_vo_api_id, x_vo_api_key, **kwargs):
        """
        Get/search incident history
        Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v1_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param float offset: The offset within the set of matching incidents
        :param float limit: The maximum number of matching incidents to return (100 max)
        :param str entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :param str incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :param str started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :param str started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :param str host: The host involved in the incident Multiple values can be separated with commas.
        :param str service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :param str current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :return: list[IncidentList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'offset', 'limit', 'entity_id', 'incident_number', 'started_after', 'started_before', 'host', 'service', 'current_phase']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reporting_v1_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `api_reporting_v1_incidents_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `api_reporting_v1_incidents_get`")

        if 'limit' in params and params['limit'] > 100.0:
            raise ValueError("Invalid value for parameter `limit` when calling `api_reporting_v1_incidents_get`, must be a value less than or equal to `100.0`")

        collection_formats = {}

        resource_path = '/api-reporting/v1/incidents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'entity_id' in params:
            query_params['entityId'] = params['entity_id']
        if 'incident_number' in params:
            query_params['incidentNumber'] = params['incident_number']
        if 'started_after' in params:
            query_params['startedAfter'] = params['started_after']
        if 'started_before' in params:
            query_params['startedBefore'] = params['started_before']
        if 'host' in params:
            query_params['host'] = params['host']
        if 'service' in params:
            query_params['service'] = params['service']
        if 'current_phase' in params:
            query_params['currentPhase'] = params['current_phase']

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IncidentList]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_reporting_v1_team_team_oncall_log_get(self, x_vo_api_id, x_vo_api_key, team, **kwargs):
        """
        A list of shift changes for a team
        Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 6 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v1_team_team_oncall_log_get(x_vo_api_id, x_vo_api_key, team, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str team: The VictorOps team 'slug' (required)
        :param datetime start: Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
        :param datetime end: Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
        :param str user_name: The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
        :return: OnCallLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_reporting_v1_team_team_oncall_log_get_with_http_info(x_vo_api_id, x_vo_api_key, team, **kwargs)
        else:
            (data) = self.api_reporting_v1_team_team_oncall_log_get_with_http_info(x_vo_api_id, x_vo_api_key, team, **kwargs)
            return data

    def api_reporting_v1_team_team_oncall_log_get_with_http_info(self, x_vo_api_id, x_vo_api_key, team, **kwargs):
        """
        A list of shift changes for a team
        Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 6 times per minute. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v1_team_team_oncall_log_get_with_http_info(x_vo_api_id, x_vo_api_key, team, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param str team: The VictorOps team 'slug' (required)
        :param datetime start: Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format
        :param datetime end: Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format
        :param str user_name: The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned
        :return: OnCallLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'team', 'start', 'end', 'user_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reporting_v1_team_team_oncall_log_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `api_reporting_v1_team_team_oncall_log_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `api_reporting_v1_team_team_oncall_log_get`")
        # verify the required parameter 'team' is set
        if ('team' not in params) or (params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `api_reporting_v1_team_team_oncall_log_get`")


        collection_formats = {}

        resource_path = '/api-reporting/v1/team/{team}/oncall/log'.replace('{format}', 'json')
        path_params = {}
        if 'team' in params:
            path_params['team'] = params['team']

        query_params = {}
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'user_name' in params:
            query_params['userName'] = params['user_name']

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OnCallLog',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_reporting_v2_incidents_get(self, x_vo_api_id, x_vo_api_key, **kwargs):
        """
        Get/search incident history
        Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v2_incidents_get(x_vo_api_id, x_vo_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param float offset: The offset within the set of matching incidents
        :param float limit: The maximum number of matching incidents to return (100 max)
        :param str entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :param str incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :param str started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :param str started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :param str host: The host involved in the incident Multiple values can be separated with commas.
        :param str service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :param str current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :param str routing_key: The original routing of the incident
        :return: ActiveIncidentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_reporting_v2_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, **kwargs)
        else:
            (data) = self.api_reporting_v2_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, **kwargs)
            return data

    def api_reporting_v2_incidents_get_with_http_info(self, x_vo_api_id, x_vo_api_key, **kwargs):
        """
        Get/search incident history
        Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as 'total'. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_reporting_v2_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_vo_api_id: Your API ID (required)
        :param str x_vo_api_key: Your API Key (required)
        :param float offset: The offset within the set of matching incidents
        :param float limit: The maximum number of matching incidents to return (100 max)
        :param str entity_id: The entity ID involved  This is the unique identifier for the entity causing the incident.
        :param str incident_number: The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50 
        :param str started_after: Return incidents started after this timestamp Specify the timestamp in ISO8601 format
        :param str started_before: Find incidents started before this timestamp  Specify the timestamp in ISO8601 format
        :param str host: The host involved in the incident Multiple values can be separated with commas.
        :param str service: The service involved in the incident (if any) Multiple values can be separated with commas.
        :param str current_phase: The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.
        :param str routing_key: The original routing of the incident
        :return: ActiveIncidentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_vo_api_id', 'x_vo_api_key', 'offset', 'limit', 'entity_id', 'incident_number', 'started_after', 'started_before', 'host', 'service', 'current_phase', 'routing_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reporting_v2_incidents_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_vo_api_id' is set
        if ('x_vo_api_id' not in params) or (params['x_vo_api_id'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_id` when calling `api_reporting_v2_incidents_get`")
        # verify the required parameter 'x_vo_api_key' is set
        if ('x_vo_api_key' not in params) or (params['x_vo_api_key'] is None):
            raise ValueError("Missing the required parameter `x_vo_api_key` when calling `api_reporting_v2_incidents_get`")

        if 'limit' in params and params['limit'] > 100.0:
            raise ValueError("Invalid value for parameter `limit` when calling `api_reporting_v2_incidents_get`, must be a value less than or equal to `100.0`")

        collection_formats = {}

        resource_path = '/api-reporting/v2/incidents'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'entity_id' in params:
            query_params['entityId'] = params['entity_id']
        if 'incident_number' in params:
            query_params['incidentNumber'] = params['incident_number']
        if 'started_after' in params:
            query_params['startedAfter'] = params['started_after']
        if 'started_before' in params:
            query_params['startedBefore'] = params['started_before']
        if 'host' in params:
            query_params['host'] = params['host']
        if 'service' in params:
            query_params['service'] = params['service']
        if 'current_phase' in params:
            query_params['currentPhase'] = params['current_phase']
        if 'routing_key' in params:
            query_params['routingKey'] = params['routing_key']

        header_params = {}
        if 'x_vo_api_id' in params:
            header_params['X-VO-Api-Id'] = params['x_vo_api_id']
        if 'x_vo_api_key' in params:
            header_params['X-VO-Api-Key'] = params['x_vo_api_key']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ActiveIncidentList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
